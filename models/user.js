/**
 * The data-layer for a User
 * @module Users
 */

let mongoose = require('mongoose');
let bcrypt = require('bcrypt-nodejs');
let Schema = mongoose.Schema;

let userSchema = mongoose.Schema({
    authentication: {
        id: String,
        username: String,
        token: String,
        password: String,
        attempts: Number
    },
    shortId: String,
    socketId: String,
    roles: [String],
    name: String,
    email: String,
    lastAccess: Date,
    favorites: [{ type: Schema.Types.ObjectId, ref: 'Publication' }],
    reservations: [{
        publication: { type: Schema.Types.ObjectId, ref: 'Publication' },
        pendingtoqualify: Boolean
    }],
    reviews: {
        score: Number
    },
    plan: {
        type: Number,
        testMonth: Boolean,
        publicationsAvailable: Number,
        expiration: Date
    },
    billing: {
        mercadopago: String
    }
});

/**
 * Id Hasg Generator
 *
 * @function generateHash
 * @memberof module:Users~User
 * @this module:Users~User
 * @param {String} password
 * @returns autogenerated hash to save as Id
 */
userSchema.methods.generateHash = function(password) {
    return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);
};

/**
 * Password validation
 *
 * @function validPassword
 * @memberof module:Users~User
 * @this module:Users~User
 * @param {string} password
 * @returns True or False
 */
userSchema.methods.validPassword = function(password) {
    return bcrypt.compareSync(password, this.local.password);
};


/**
 * A composition of user Authentication profile data and Auth token data.
 * @typedef {Object}            Authentication
 * @property {string}           id            - Authentication user id of the user
 * @property {string}           token         - Authentication long lived token to access user information later
 * @property {string}           email         - Email of authentication user 
 * @property {string}           name          - Display name of authentication user
 */

/**
 * Details of the client Plan
 * @typedef {Object} Plan
 * @property {number}           type                    - Type of Plan (Stone - Bronze - Silver - Gold - Crystal)
 * @property {string}           testMonth               - Indicate is the actual month is test
 * @property {number}           publicationsAvailable   - Count of publications available 
 * @property {date}             expiration              - Date of publication expiration
 */

/**
 * Mongoose model for user document.
 *
 * @class User
 * @property {Plan}                 plan            - plan of the user
 * @property {Authentication}       authentication  - Authentication information of the user
 * @property {string}               shortId         - shortId of the user
 * @property {string}               socketId        - id of the socket.io of the user
 * @property {ArrayArray.<Role>}    roles           - list of roles for the user
 */
module.exports = mongoose.model('User', userSchema);